import json

import telebot
from telebot import types
from save_data import save_data, clear_data


class Bot:
    with open('status.txt', 'r') as f:
        conversation = f.read()

    def __init__(self):
        self.token = '5329245219:AAFk9jZCoshDSu08SkACDgp2xC8m8_s7X1I'
        self.bot = telebot.TeleBot(self.token)
        self.start_buttons = ['begin calculate expenses', 'add expense', 'calculate expenses']
        self.results = {
            "–ö–∞—Ä`—î—Ä–∞ üë©‚Äçüíª": 0,
            "–°—ñ–º'—è üë®‚Äçüë©‚Äçüë¶‚Äçüë¶": 0,
            "–û—Ç–æ—á–µ–Ω–Ω—è ü§≥": 0,
            "–¢–≤–æ—Ä—á—ñ—Å—Ç—å —ñ —Ö–æ–±–±—ñ üê±‚Äçüë§": 0,
            "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —Ç–∞ –ø–æ–¥–æ—Ä–æ–∂—ñ üìÜ": 0,
            "–†–æ–∑–≤–∏—Ç–æ–∫ (–æ—Å–≤—ñ—Ç–∞) üë®‚Äçüéì": 0,
            "–ó–¥–æ—Ä–æ–≤'—è, —Å–ø–æ—Ä—Ç üèì": 0
        }
        self.days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        self.data = {}

        @self.bot.message_handler(commands=['start'])
        def start_bot(message):
            start_markup = types.ReplyKeyboardMarkup()
            for i in self.start_buttons:
                start_markup.add(types.KeyboardButton(i.title()))
            self.bot.send_message(message.chat.id, f"""
        –ü—Ä–∏–≤—ñ—Ç, {message.chat.first_name}, —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ \
        –≤—Å—ñ —Ç–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, –Ω–∞ —è–∫—ñ —Å—Ñ–µ—Ä–∏ –∂–∏—Ç—Ç—è —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –¥–∏–≤–∏—Ç–∏—Å—è –±—ñ–ª—å—à–µ
        """, reply_markup=start_markup)

        @self.bot.message_handler(content_types=['text'])
        def begin_calculate_expenses(message):
            if message.text.lower() not in self.start_buttons:
                self.bot.reply_to(message, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞!')
                return
            if self.conversation == "True":
                if message.text.lower() == self.start_buttons[0]:
                    self.bot.reply_to(message, '–í–∏ –≤–∂–µ –ø–æ—á–∞–ª–∏ –≤–µ—Å—Ç–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫!')
                    return
                elif message.text.lower() == self.start_buttons[1]:
                    categories_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
                    for i in self.results.keys():
                        categories_markup.add(types.KeyboardButton(i))
                    msg = self.bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: ", reply_markup=categories_markup)
                    self.bot.register_next_step_handler(msg, choose_category)
                else:
                    self.bot.reply_to(message, '–û–±—Ä–∞—Ö–æ–≤—É—é –≤–∏—Ç—Ä–∞—Ç–∏...')
                    expenses = self.calculate_expenses()
                    reply = '\n'.join(f"{i} - {expenses[i]:.2f} %" for i in expenses.keys() if self.results[i] != 0)
                    self.bot.send_message(message.chat.id, reply)
                    most_expense = max(self.results, key=self.results.get)
                    least_expense = min(self.results, key=self.results.get)
                    self.bot.send_message(message.chat.id,
                                          f'–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é "{most_expense}": —Å—é–¥–∏ —ñ–¥—É—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç!'
                                          )
                    self.bot.send_message(message.chat.id,
                                          f'–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é "{least_expense}": —Å—é–¥–∏ —ñ–¥—É—Ç—å –Ω–∞–π–º–µ–Ω—à–µ –≤–∏—Ç—Ä–∞—Ç!'
                                          )
                    for value in self.results.keys():
                        self.results[value] = 0
                    clear_data()
                    self.conversation = "False"
                    with open('status.txt', 'w') as saver:
                        saver.write(self.conversation)
                    return
            if message.text.lower() == self.start_buttons[1]:
                if self.conversation == "False":
                    self.bot.reply_to(message, '–í–∏ —â–µ –Ω–µ –ø–æ—á–∞–ª–∏ –≤–µ—Å—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏!')
                    return
            elif message.text.lower() == self.start_buttons[0]:
                self.conversation = "True"
                with open("status.txt", 'w') as saver:
                    saver.write(self.conversation)
                categories_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
                for i in self.results.keys():
                    categories_markup.add(types.KeyboardButton(i))
                msg = self.bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: ", reply_markup=categories_markup)
                self.bot.register_next_step_handler(msg, choose_category)
            elif message.text.lower() == self.start_buttons[-1]:
                self.bot.reply_to(message, '–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —á–æ–≥–æ –æ–±—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏!')

        def choose_category(message):
            user_category = message.text
            if user_category not in self.results:
                self.bot.send_message(message.chat.id, "–¢–∞–∫–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î!")
            self.data['Category'] = user_category
            dates = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            for date in self.days:
                dates.add(types.KeyboardButton(date))
            msg = self.bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–µ–Ω—å –∫–æ–ª–∏ –±—É–ª–∞ –∑—Ä–æ–±–ª–µ–Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∞: ",
                                        reply_markup=dates)
            self.bot.register_next_step_handler(msg, enter_date)

        def enter_date(message):
            user_entered_days = message.text
            if user_entered_days not in self.days:
                self.bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∏–π –¥–µ–Ω—å!")
                return
            msg = self.bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º–º—É –≤–∏—Ç—Ä–∞—Ç–∏: ")
            self.bot.register_next_step_handler(msg, get_amount_of_money)

        def get_amount_of_money(message):
            user_amount_of_expenses = message.text
            if not user_amount_of_expenses.isdigit():
                self.bot.reply_to(message, '–°—É–º–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!')
                return
            self.data['Total expenses'] = user_amount_of_expenses
            start_markup = types.ReplyKeyboardMarkup()
            for i in self.start_buttons:
                start_markup.add(types.KeyboardButton(i.title()))
            self.bot.send_message(message.chat.id, '–î–æ–±—Ä–µ, —è –∑–∞–ø–∏—Å–∞–≤ —Ü–µ!', reply_markup=start_markup)
            self.save_expense()

    def calculate_expenses(self):
        with open('expenses.json', 'r', encoding='utf8') as j:
            expenses_data = json.loads(j.read())
        total_expense = 0
        for expense in expenses_data['expenses']:
            self.results[expense['Category']] += float(expense['Total expenses'])
            total_expense += float(expense['Total expenses'])
        for i in self.results.keys():
            self.results[i] = (self.results[i] / total_expense) * 100
        return self.results

    def save_expense(self):
        save_data(self.data)
        self.data.clear()

    def start_polling(self):
        self.bot.polling(non_stop=True)


if __name__ == '__main__':
    main_bot = Bot()
    main_bot.start_polling()
