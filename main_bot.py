"""Simple Telegram Bot 'Circle of Life',
built on pyTelegramBotApi.
"""

import json
import os
from typing import Optional

import telebot  # type: ignore
from telebot import types
from save_data import save_data, clear_data


class Bot:

    def __init__(self):
        """Circle of Life bot for Telegram."""
        self.token = os.environ.get('Circle_Of_Life_Token')
        self.bot = telebot.TeleBot(self.token)
        self.start_buttons = ['–ø–æ—á–∞—Ç–∏ –æ–±—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏',
                              '–¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É', '–æ–±—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É(–∏)']
        self.results = {
            "–ö–∞—Ä`—î—Ä–∞ üë©‚Äçüíª": 0,
            "–°—ñ–º'—è üë®‚Äçüë©‚Äçüë¶‚Äçüë¶": 0,
            "–û—Ç–æ—á–µ–Ω–Ω—è ü§≥": 0,
            "–¢–≤–æ—Ä—á—ñ—Å—Ç—å —ñ —Ö–æ–±–±—ñ üê±‚Äçüë§": 0,
            "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —Ç–∞ –ø–æ–¥–æ—Ä–æ–∂—ñ üìÜ": 0,
            "–†–æ–∑–≤–∏—Ç–æ–∫ (–æ—Å–≤—ñ—Ç–∞) üë®‚Äçüéì": 0,
            "–ó–¥–æ—Ä–æ–≤'—è, —Å–ø–æ—Ä—Ç üèì": 0,
        }
        self.days = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞',
                     '–ß–µ—Ç–≤–µ—Ä', "–ü'—è—Ç–Ω–∏—Ü—è", '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
        self.data = {}
        self.total_expense = 0
        self.start_markup = types.ReplyKeyboardMarkup()
        for i in self.start_buttons:
            self.start_markup.add(types.KeyboardButton(i.title()))
        with open('status.txt', 'r') as f:
            self.conversation = f.read()

        @self.bot.message_handler(commands=['start'])
        def start_bot(message) -> None:
            """Starting our bot."""
            self.bot.send_message(message.chat.id, f"""
                –ü—Ä–∏–≤—ñ—Ç, {message.chat.first_name},
—è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—Å—ñ —Ç–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ üíµ —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è,
–Ω–∞ —è–∫—ñ —Å—Ñ–µ—Ä–∏ –∂–∏—Ç—Ç—è —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –¥–∏–≤–∏—Ç–∏—Å—è –±—ñ–ª—å—à–µ üìú.
        """, reply_markup=self.start_markup)

        @self.bot.message_handler(content_types=['text'])
        def begin_calculate_expenses(message):
            """The main logic of bot."""
            if message.text.lower() not in self.start_buttons:
                self.bot.reply_to(message, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞!')
                return
            if self.conversation == "True":
                if message.text.lower() == self.start_buttons[0]:
                    self.bot.reply_to(message,
                                      '–í–∏ –≤–∂–µ –ø–æ—á–∞–ª–∏ –≤–µ—Å—Ç–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫!')
                    return
                elif message.text.lower() == self.start_buttons[1]:
                    categories_markup = types.ReplyKeyboardMarkup(
                        one_time_keyboard=True,
                    )
                    for category in self.results.keys():
                        categories_markup.add(types.KeyboardButton(category))
                    msg = self.bot.send_message(message.chat.id,
                                                "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: ",
                                                reply_markup=categories_markup,
                                                )
                    self.bot.register_next_step_handler(msg, choose_category)
                else:
                    try:
                        self.bot.reply_to(message, '–û–±—Ä–∞—Ö–æ–≤—É—é –≤–∏—Ç—Ä–∞—Ç–∏...')
                        expenses = self.calculate_expenses()
                        reply = '\n'.join(
                            f"{expense} - {expenses[expense]:.2f} %"
                            for expense in expenses.keys()
                            if self.results[expense] != 0)
                        self.bot.send_message(
                            message.chat.id, reply,
                        )
                        new_results = {}
                        for result in self.results.keys():
                            if self.results[result] != 0:
                                new_results[result] = self.results[result]
                        if len(new_results) == 1:
                            key = [k for k, v in new_results.items()
                                   if v == 100][0]
                            self.bot.send_message(
                                message.chat.id,
                                '–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É '
                                '–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '
                                f'"{key}": '
                                '—Å—é–¥–∏ —ñ–¥—É—Ç—å <b><u>—É—Å—ñ</u></b> –≤–∏—Ç—Ä–∞—Ç–∏!',
                                reply_markup=self.start_markup,
                                parse_mode='html',
                            )
                            self.annul_results()
                            return
                        most_expense = max(new_results, key=new_results.get)
                        least_expense = min(new_results, key=new_results.get)
                        self.bot.send_message(
                            message.chat.id,
                            '–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '
                            f'"{most_expense}": '
                            '—Å—é–¥–∏ —ñ–¥—É—Ç—å <b><u>–Ω–∞–π–±—ñ–ª—å—à–µ</u></b> –≤–∏—Ç—Ä–∞—Ç!',
                            parse_mode='html',
                        )
                        self.bot.send_message(
                            message.chat.id,
                            '–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '
                            f'"{least_expense}": '
                            '—Å—é–¥–∏ —ñ–¥—É—Ç—å <b><u>–Ω–∞–π–º–µ–Ω—à–µ</u></b> –≤–∏—Ç—Ä–∞—Ç!',
                            parse_mode='html',
                        )
                        self.annul_results()
                        return
                    except AttributeError:
                        self.bot.send_message(
                            message.chat.id,
                            '–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —á–æ–≥–æ –æ–±—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏!',
                            reply_markup=self.start_markup,
                        )
                        self.save_conversation_status("False")
                        clear_data()
                        return
            if message.text.lower() == self.start_buttons[1]:
                if self.conversation == "False":
                    self.bot.reply_to(message,
                                      '–í–∏ —â–µ –Ω–µ –ø–æ—á–∞–ª–∏ –≤–µ—Å—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏!',
                                      )
                    return
            elif message.text.lower() == self.start_buttons[0]:
                self.save_conversation_status("True")
                categories_markup = types.ReplyKeyboardMarkup(
                    one_time_keyboard=True,
                )
                for category_name in self.results.keys():
                    categories_markup.add(types.KeyboardButton(category_name))
                msg = self.bot.send_message(message.chat.id,
                                            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: ",
                                            reply_markup=categories_markup,
                                            )
                self.bot.register_next_step_handler(msg, choose_category)
            elif message.text.lower() == self.start_buttons[-1]:
                self.bot.reply_to(message, '–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —á–æ–≥–æ –æ–±—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏!')

        def choose_category(message) -> None:
            """Bot gets category from user and saves it, if input
            data is valid.
            """
            user_category = message.text
            if user_category not in self.results:
                self.bot.send_message(message.chat.id,
                                      "–¢–∞–∫–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î!",
                                      reply_markup=self.start_markup,
                                      )
                self.save_conversation_status("False")
                clear_data()
                return
            self.data['Category'] = user_category
            dates = types.ReplyKeyboardMarkup(one_time_keyboard=True)
            for date in self.days:
                dates.add(types.KeyboardButton(date))
            msg = self.bot.send_message(message.chat.id,
                                        "–í–≤–µ–¥—ñ—Ç—å –¥–µ–Ω—å –∫–æ–ª–∏ –±—É–ª–∞ "
                                        "–∑—Ä–æ–±–ª–µ–Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∞: ",
                                        reply_markup=dates,
                                        )
            self.bot.register_next_step_handler(msg, enter_date)

        def enter_date(message) -> None:
            user_entered_days = message.text
            if user_entered_days not in self.days:
                self.bot.send_message(message.chat.id,
                                      "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∏–π –¥–µ–Ω—å!",
                                      reply_markup=self.start_markup,
                                      )

                return
            msg = self.bot.send_message(message.chat.id,
                                        "–í–≤–µ–¥—ñ—Ç—å —Å—É–º–º—É –≤–∏—Ç—Ä–∞—Ç–∏: ",
                                        )
            self.bot.register_next_step_handler(msg, get_amount_of_money)

        def get_amount_of_money(message) -> None:
            """Getting amount of money in digits.
            Bot expects, that user knows in which currency
            he wants to count his expenses.
            """
            user_amount_of_expenses = message.text
            try:
                float(user_amount_of_expenses)
            except ValueError:
                self.bot.send_message(message.chat.id,
                                      '–°—É–º–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!',
                                      reply_markup=self.start_markup,
                                      )
                return
            self.data['Total expenses'] = user_amount_of_expenses
            self.bot.send_message(message.chat.id,
                                  '–î–æ–±—Ä–µ, —è –∑–∞–ø–∏—Å–∞–≤ —Ü–µ!',
                                  reply_markup=self.start_markup,
                                  )
            self.save_expense()

    def calculate_expenses(self) -> Optional[dict]:
        """Calculate percents of expense for each category.
        Returns:
            dict with results of calculating
        """
        with open('expenses.json', 'r', encoding='utf8') as j:
            expenses_data = json.loads(j.read())
        try:
            for expense in expenses_data['expenses']:
                self.results[expense['Category']] += \
                    float(expense['Total expenses'])
                self.total_expense += float(expense['Total expenses'])
            for i in self.results.keys():
                self.results[i] = (self.results[i] / self.total_expense) * 100
            return self.results
        except (ZeroDivisionError, AttributeError):
            self.save_conversation_status("False")
            return None

    def annul_results(self):
        for value in self.results.keys():
            self.results[value] = 0
        clear_data()
        self.total_expense = 0
        self.save_conversation_status("False")

    def save_expense(self) -> None:
        """Saves data to json and clears old data"""
        save_data(self.data)
        self.data.clear()

    def save_conversation_status(self, status: str) -> None:
        """Saves conversation status in 'status.txt'
        Args:
            status (str): string representing of conversation status.
        """
        self.conversation = status
        with open("status.txt", 'w') as saver:
            saver.write(self.conversation)

    def start_polling(self) -> None:
        """Bot will be polling infinitive"""
        self.bot.polling(non_stop=True)


if __name__ == '__main__':
    main_bot = Bot()
    main_bot.start_polling()
